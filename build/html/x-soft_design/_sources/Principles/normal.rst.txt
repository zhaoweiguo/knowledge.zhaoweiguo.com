常用
####

设计原则是指导我们代码设计的一些经验总结，对于某些场景下，是否应该应用某种设计模式，具有指导意义。比如，“开闭原则” 是很多设计模式（策略、模板等）的指导原则。


设计模式的六大原则::

    总原则：开闭原则（Open Close Principle）
    开闭原则就是说对扩展开放，对修改关闭。
    在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。
    所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。
    想要达到这样的效果，我们需要使用接口和抽象类等，后面的具体设计中我们会提到这点。

    1、单一职责原则
    不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分

    2、里氏替换原则（Liskov Substitution Principle）
    里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。
    里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。
    LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。
    里氏代换原则是对“开-闭”原则的补充。
    实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。

    里氏替换原则中，子类对父类的方法尽量不要重写和重载。
    因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。

    3、依赖倒转原则（Dependence Inversion Principle）
    这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。
    写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。

    4、接口隔离原则（Interface Segregation Principle）
    这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。
    使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。

    5、迪米特法则（最少知道原则）（Demeter Principle）
    就是说：一个类对自己依赖的类知道的越少越好。
    也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。
    这样当被依赖的类变化时，才能最小的影响该类。

    最少知道原则的另一个表达方式是：只与直接的朋友通信。
    类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。
    我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。
    局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。

    6、合成复用原则（Composite Reuse Principle）
    原则是尽量首先使用合成/聚合的方式，而不是使用继承。






.. note:: 在面向对象编程中，有两个常见的对象设计方法，组合和继承，两者都可以解决代码复用的问题，但是使用后者时容易出现继承层次过深，对象关系过于复杂的副作用，从而导致代码的可维护性变差。因此，一个经典的面向对象设计原则是：组合优于继承。



::

    1. 无环依赖原则（Acyclic Dependencies Principle，ADP）
        不要让两个模块之间出现循环依赖。怎么解除循环依赖？
    2. 组合 / 聚合复用原则（Composition/Aggregation Reuse Principle，CARP）
        当要扩展功能时，优先考虑使用组合，而不是继承。
    3. 高内聚与低耦合（High Cohesion and Low Coupling，HCLC）
        模块内部需要做到内聚度高，模块之间需要做到耦合度低。
        这是判断一个模块是在做一个业务还是多个业务的依据。
        如果是在做同一个业务，那么它所有的代码都是内聚的，相互有较强的依赖。
    4. 惯例优于配置（Convention over Configuration，COC）
        灵活性会增加复杂性，所以除非这个灵活性是必须的，否则应尽量让惯例来减少配置，这样才能提高开发效率。
        如有可能，尽量做到 “零配置”。
    5. 命令查询分离（Command Query Separation，CQS）
        读写操作要分离。在定义接口方法时，要区分哪些是命令（写操作），哪些是查询（读操作），要将它们分离，而不要揉到一起。
    6. 关注点分离（Separation of Concerns，SOC）
        将一个复杂的问题分离为多个简单的问题，然后逐个解决这些简单的问题，那么这个复杂的问题就解决了。
        当然这条说了等于没说，难在如何进行分离，最终还是归结到对业务的理解上。











