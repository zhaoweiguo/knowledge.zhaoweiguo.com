.. _principle_KISS:

KISS principle
##############

::

    Keep It Simple and Stupid.
    Keep It Short and Simple.
    Keep It Simple and Straightforward.


KISS 原则算是一个万金油类型的设计原则，可以应用在很多场景中。它不仅经常用来指导软件开发，还经常用来指导更加广泛的系统设计、产品设计等，比如，冰箱、建筑、iPhone 手机的设计等等

.. note:: KISS 原则是保持代码可读和可维护的重要手段。KISS 原则中的 “简单” 并不是以代码行数来考量的。代码行数越少并不代表代码越简单，我们还要考虑逻辑复杂度、实现难度、代码的可读性等。而且，本身就复杂的问题，用复杂的方法解决，并不违背 KISS 原则。除此之外，同样的代码，在某个业务场景下满足 KISS 原则，换一个应用场景可能就不满足了。



KISS 原则::

    保持代码可读和可维护的重要手段。
    代码足够简单，也就意味着很容易读懂，bug 比较难隐藏。
    即便出现 bug，修复起来也比较简单。

写出满足 KISS 原则的代码的几条指导原则::

    1. 不要使用同事可能不懂的技术来实现代码
        比如正则表达式，还有一些编程语言中过于高级的语法等。
    2. 不要重复造轮子，要善于使用已经有的工具类库
        经验证明，自己去实现这些类库，出 bug 的概率会更高，维护的成本也比较高
    3. 不要过度优化
        不要过度使用一些奇技淫巧来优化代码
        比如，位运算代替算术运算、复杂的条件语句代替 if-else、使用一些过于底层的函数等
        牺牲代码的可读性。


代码是否足够简单是一个挺主观的评判。同样的代码，有的人觉得简单，有的人觉得不够简单。而往往自己编写的代码，自己都会觉得够简单。所以，评判代码是否简单，还有一个很有效的间接方法，那就是 code review。如果在 code review 的时候，同事对你的代码有很多疑问，那就说明你的代码有可能不够 “简单”，需要优化啦。




* https://en.wikipedia.org/wiki/KISS_principle