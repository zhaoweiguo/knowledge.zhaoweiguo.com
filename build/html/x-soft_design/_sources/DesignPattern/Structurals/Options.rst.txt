Options-选项模式
################

.. note:: 使用选项模式，我们可以创建一个带有默认值的 struct 变量，并选择性地修改其中一些参数的值。

.. note:: 在 Python 语言中，创建一个对象时，可以给参数设置默认值，这样在不传入任何参数时，可以返回携带默认值的对象，并在需要时修改对象的属性。这种特性可以大大简化开发者创建一个对象的成本，尤其是在对象拥有众多属性时。


第一种方法，我们要分别开发两个用来创建实例的函数::

    // 1. 一个可以创建带默认值的实例
    // 2. 一个可以定制化创建实例
    const (
      defaultTimeout = 10
      defaultCaching = false
    )

    type Connection struct {
      addr    string
      cache   bool
      timeout time.Duration
    }

    // NewConnect creates a connection.
    func NewConnect(addr string) (*Connection, error) {
      return &Connection{
        addr:    addr,
        cache:   defaultCaching,
        timeout: defaultTimeout,
      }, nil
    }

    // NewConnectWithOptions creates a connection with options.
    func NewConnectWithOptions(addr string, cache bool, timeout time.Duration) (*Connection, error) {
      return &Connection{
        addr:    addr,
        cache:   cache,
        timeout: timeout,
      }, nil
    }

缺点::

    使用这种方式，创建同一个 Connection 实例，却要实现两个不同的函数，实现方式很不优雅。

另一种方法创建一个带默认值的选项，并用该选项创建实例::

    const (
      defaultTimeout = 10
      defaultCaching = false
    )

    type Connection struct {
      addr    string
      cache   bool
      timeout time.Duration
    }

    type ConnectionOptions struct {
      Caching bool
      Timeout time.Duration
    }

    func NewDefaultOptions() *ConnectionOptions {
      return &ConnectionOptions{
        Caching: defaultCaching,
        Timeout: defaultTimeout,
      }
    }

    // NewConnect creates a connection with options.
    func NewConnect(addr string, opts *ConnectionOptions) (*Connection, error) {
      return &Connection{
        addr:    addr,
        cache:   opts.Caching,
        timeout: opts.Timeout,
      }, nil
    }

缺点::

    为了创建 Connection 实例，每次我们都要创建 ConnectionOptions，操作起来比较麻烦

使用选项模式来创建实例::

    type Connection struct {
      addr    string
      cache   bool
      timeout time.Duration
    }

    const (
      defaultTimeout = 10
      defaultCaching = false
    )

    type options struct {
      timeout time.Duration
      caching bool
    }

    // Option overrides behavior of Connect.
    type Option interface {
      apply(*options)
    }

    type optionFunc func(*options)

    func (f optionFunc) apply(o *options) {
      f(o)
    }

    func WithTimeout(t time.Duration) Option {
      return optionFunc(func(o *options) {
        o.timeout = t
      })
    }

    func WithCaching(cache bool) Option {
      return optionFunc(func(o *options) {
        o.caching = cache
      })
    }

    // Connect creates a connection.
    func NewConnect(addr string, opts ...Option) (*Connection, error) {
      options := options{
        timeout: defaultTimeout,
        caching: defaultCaching,
      }

      for _, o := range opts {
        o.apply(&options)
      }

      return &Connection{
        addr:    addr,
        cache:   options.caching,
        timeout: options.timeout,
      }, nil
    }

选项模式有很多优点，例如::

    支持传递多个参数，并且在参数发生变化时保持兼容性；
    支持任意顺序传递参数；
    支持默认值；
    方便扩展；
    通过 WithXXX 的函数命名，可以使参数意义更加明确，等等。

缺点::

    为了实现选项模式，我们增加了很多代码

适用场景::

    结构体参数很多，创建结构体时，我们期望创建一个携带默认值的结构体变量，并选择性修改其中一些参数的值。
    结构体参数经常变动，变动时我们又不想修改创建实例的函数。
      例如：结构体新增一个 retry 参数，但是又不想在 NewConnect 入参列表中添加 retry int 这样的参数声明

    如果结构体参数比较少，可以慎重考虑要不要采用选项模式。





* Functional options for friendly APIs: https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis

实例
====

.. .. rli:: https://raw.githubusercontent.com/tal-tech/go-zero/e8376936d577f8863b9de9f6351ab8f2e3c3dfed/rest/server.go
..    :language: go
..    :lines: 55-72
..    :emphasize-lines: 1-3, 13-15
..    :linenos:
..    :lineno-start: 55

.. raw:: html

   <script src="https://emgithub.com/embed.js?target=https%3A%2F%2Fgithub.com%2Ftal-tech%2Fgo-zero%2Fblob%2Fe8376936d577f8863b9de9f6351ab8f2e3c3dfed%2Frest%2Fserver.go%23L42-L72&style=a11y-dark&showBorder=on&showLineNumbers=on&showFileMeta=on&showCopy=on"></script>





