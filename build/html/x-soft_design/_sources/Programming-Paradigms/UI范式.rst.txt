UI范式
######

Paradigm 1: Batch Processing
============================

* 从 1945 年左右计算机诞生以来，第一个 UI 范式是批处理。在此范例中，用户指定了他们希望计算机执行的所有操作的完整工作流。这批指令被提交给数据中心（通常作为一副打孔卡），并在某个未指定的时间进行处理，通常是通宵达旦。、
* 之后，通常是第二天早上，用户会拿起他们批次的输出：这将基本上是一副厚厚的打印输出，但它也可能是一副新的穿孔卡片。如果原始批次包含哪怕是最轻微的错误，就不会有输出，或者结果将毫无意义。
* 从 UI 的角度来看，批处理不涉及用户和计算机之间的任何来回操作。UI是一个单一的联系点：那批打孔的卡片。可用性很糟糕，通常需要几天时间才能对批处理进行微调，以达到执行它会产生预期最终结果的程度。


Paradigm 2: Command-Based Interaction Design
============================================

* 大约在 1964 年，分时（多个用户通过连接的终端共享一台大型计算机）的出现导致了第二种 UI 范式：基于命令的交互。在这种范式中，用户和计算机将轮流执行，一次一个命令。这种范式是如此强大，以至于从那时起它就一直主导着计算——60 多年。
* 基于命令的交互一直是贯穿三代用户界面技术的基本方法：命令行（如 DOS 和 Unix）、基于文本的全屏终端（与 IBM 大型机通用）和图形用户界面（GUI：Macintosh、Windows 和所有当前的智能手机平台）。确实强大而持久。
* 与批处理相比，基于命令的交互的好处是显而易见的：在执行每个命令后，用户可以重新评估情况并修改未来的命令，以朝着预期目标前进。
* 图形用户界面的美妙之处在于，它们确实在每个命令后显示状态，至少在设计得当的情况下是这样。自 1984 年 Macintosh 推出以来，图形用户界面一直主导着 UX 世界：大约 40 年的霸主地位，直到它可能被下一代 UI 技术取代，更重要的是，以人工智能的形式取代下一个 UI 范式。


Paradigm 3: Intent-Based Outcome Specification
==============================================

* 新的人工智能系统，用户不再告诉计算机该做什么。相反，用户告诉计算机他们想要什么结果。因此，以当前生成式 AI 为代表的第三种 UI 范式是基于意图的结果规范。
* 通过这种新的UI范式，以当前的生成式AI为代表，用户告诉计算机所需的结果，但没有指定应该如何实现这个结果。与传统的基于命令的交互相比，这种范式完全颠倒了控制点。我怀疑我们甚至不应该将这种用户体验描述为一种“交互”，因为没有轮流或渐进的进展。
* 单击或点击屏幕上的内容是用户交互的一个直观且必不可少的方面，不容忽视。因此，第二种 UI 范式将幸存下来，尽管其主导作用较小。未来的人工智能系统可能会有一个混合用户界面，它结合了基于意图和基于命令的界面的元素，同时仍然保留了许多GUI元素。






参考
====

* AI——First New UI Paradigm in 60 Years: https://www.nngroup.com/articles/ai-paradigm/





