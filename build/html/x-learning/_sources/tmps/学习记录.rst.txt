学习记录
########

最关键的知识点::

    网络层协议：了解Matter协议如何在网络层上进行通信，以及与其他协议的关系。
    标准和规范：了解Matter协议的标准和规范，包括如何实现Matter协议和如何与其他设备进行互操作。
    设备管理：了解如何管理Matter设备，包括设备的配置、诊断和升级。
    安全：了解如何保护Matter网络的安全，以及如何防止攻击者攻击Matter设备。
    应用开发：了解如何开发使用Matter协议的应用程序，以及如何将Matter协议集成到现有的物联网系统中。



网络层协议::

    IP协议：了解如何在网络上定位设备并在设备之间传输数据。
    传输层协议：了解如何在设备之间进行可靠的数据传输，以及如何处理网络中的错误和故障。
    数据链路层协议：了解如何在网络中的两个设备之间建立物理连接并传输数据。
    网络层协议的体系结构：了解网络层协议的各种类型以及它们如何协同工作。


Matter协议优势::

    标准化：Matter是一种开放的标准协议，具有很高的标准化水平，可以统一不同厂商生产的物联网设备。这有助于提高物联网设备间的互操作性，并有利于推动物联网行业的发展。
    通用性：Matter协议可以在多种不同的网络环境中使用，如Wi-Fi、Ethernet等。这使得物联网设备的使用变得更加灵活，适用范围更加广泛。
    兼容性：Matter协议可以与现有的物联网设备进行兼容，并且不需要对现有设备进行改造。
    产业支持：很多大型厂商和行业组织都已经开始支持和使用Matter协议，这也是它流行起来的原因之一。

::

    ScratchJr：适合5-7岁的孩子，帮助他们了解编程基础概念。
    Code.org：面向所有年龄段的孩子，通过游戏和项目学习编程。
    Lightbot：适合6-12岁的孩子，帮助他们学习程序流程和逻辑。
    Kodable：适合5-10岁的孩子，通过游戏帮助孩子了解编程的基本概念。
    Tynker：适合5-18岁的孩子，通过游戏和项目学习编程。
    CodeMonkey：是一个编程学习平台，它适合8岁以上的小孩
    Hopscotch：免费的编程学习平台，适合5-12岁的孩子
    Scratch：适合5-18岁的孩子。
    Blockly：是一个由Google开发的编程学习平台，提供了适合幼儿园和小学生的课程内容
    Codeacademy：适合所有年龄段的孩子。

    ScratchJr：https://www.scratchjr.org/
    Code.org：https://code.org/
    Lightbot：https://lightbot.com/
    Kodable：https://www.kodable.com/
    Tynker：https://www.tynker.com/
    CodeMonkey：https://www.codemonkey.com/
    Hopscotch: https://www.gethopscotch.com/
    Scratch：https://scratch.mit.edu/
    Blockly：https://developers.google.com/blockly/
    Codeacademy：https://www.codecademy.com/


    1. 使用适合年龄的编程工具：例如Scratch Jr，它专为儿童制作，是一个简单易用的编程环境。
    2. 引入简单的概念：介绍编程的基本概念，如指令、顺序和循环，并使用直观的图像来帮助孩子理解。
    3. 创建有趣的项目：利用孩子的兴趣和想象力，帮助她创建有趣的项目，如动画、游戏等。
    4. 关注反馈：通过观察孩子的反馈，调整教学方式和难度，保持孩子的兴趣。
    5. 提供积极的鼓励：给予孩子积极的鼓励，让她对编程充满信心，并不断提高她的编程技能。







学习IPv6协议的方法如下：

    了解IPv6协议的概念和目的：IPv6是为了解决IPv4地址耗尽的问题，提供更多地址和更高的效率。
    阅读IPv6协议的标准文件：最新的标准文件是RFC 8200。
    学习IPv6协议的地址结构：IPv6地址由8个16位数字组成，使用冒号分隔。
    了解IPv6协议的特性和优势：比如更大的地址空间、更高的效率、更强的安全性等。
    实际操作：尝试在计算机或网络设备上配置IPv6，并使用它进行通信。
    练习：通过模拟题和在线实验，加深对IPv6协议的理解。


    https://labs.ripe.net/ - 提供IPv6实验室，可以模拟各种IPv6网络环境。
    http://ipv6.he.net/ - 提供各种IPv6测试工具，如traceroute、ping等。
    http://test-ipv6.com/ - 提供一个在线的IPv6测试平台，可以评估您的设备和网络是否支持IPv6。

    GNS3：一个开源的网络模拟器，可以模拟复杂的网络环境，包括IPv6。
    PacketTracer：Cisco Systems公司开发的一款在线网络模拟器，可以模拟IPv6环境。
    Boson：一款专门用于网络技术训练的在线模拟器，支持IPv6模拟。
    Junosphere：一款在线的虚拟网络模拟器，可以模拟IPv6网络环境。

    GNS3：https://gns3.com/
    PacketTracer：https://www.netacad.com/products/packet-tracer
    Boson：https://www.boson.com/
    Junosphere：https://www.junosphere.




IPv6相关的模拟题：

    在线课程网站：如Udemy、Coursera等网站上提供了许多关于IPv6的课程，这些课程通常会包含一些模拟题，以验证学生对课程内容的掌握情况。
    技术书籍：如《IPv6核心技术》、《IPv6网络编程》等专业书籍中也会包含一些模拟题，可以帮助您验证对IPv6的了解程度。

RFC8200是IPv6核心协议标准，主要描述了IPv6协议的核心内容。其重点内容包括：
    地址体系：定义了IPv6地址的结构，以及如何使用地址标识网络上的设备。
    包格式：描述了IPv6数据包的格式，以及如何在网络中传递数据。
    数据流：定义了如何在IPv6网络中进行数据流量管理，以及如何在网络上分组。
    路由：描述了如何在IPv6网络中进行路由，以及如何使用路由协议进行网络连接。
    安全：描述了如何在IPv6网络中保护数据的安全，以及如何使用安全协议进行网络保护。


关于RFC8200的问题::

    IPv6地址的结构是什么？
        IPv6地址结构是128位二进制数字，它以8个16位块的形式组成，并用冒号分隔。每个16位块的十六进制表示形式可以缩写为更短的形式，以减少整个地址的长度。例如，如果连续的多个16位块都是0，则可以用一个单独的双冒号替换它们。
    IPv6数据包的格式是什么？
        IPv6数据包由四个部分组成：首部、载荷、选项（可选）和校验和（可选）。
        首部包含有关数据包的信息，例如目的地址和源地址、数据包的大小等。
        载荷是数据包实际包含的信息，例如传输层协议的数据。
        选项包含提供额外信息的数据，例如路由信息。
        校验和是数据包的一个附加字段，用于确保数据包在传输过程中未被损坏。
    在IPv6网络中如何实现数据流量管理？
        IPv6网络中的数据流量管理通常通过网络中的路由器进行。
        路由器可以通过分析数据流的速率和模式来确定如何管理数据流。
        例如，路由器可以通过限制特定数据流的速率来降低带宽使用，或者通过优先处理特定类型的数据流来提高性能。
    如何在IPv6网络中进行路由？
        配置IPv6地址：在每个路由器和主机上配置IPv6地址，以便可以在网络上进行通信。
        启用IPv6路由：在每个路由器上启用IPv6路由功能，以便其能够转发IPv6数据包。
        配置静态路由：如果需要，您可以在路由器上配置静态路由，指定路由数据包应该如何从一个网络转移到另一个网络。
        启用动态路由协议：如果需要，您可以在路由器上启用动态路由协议，例如OSPFv3或EIGRP for IPv6，以便路由器能够自动学习和更新网络拓扑结构。
        验证路由：最后，您可以使用各种工具，如ping和traceroute，验证路由是否正常工作。
    如何保护IPv6网络中的数据安全？
        使用IPsec：它是一个加密技术，用于在网络中保护数据。
        防火墙：使用防火墙来阻止恶意流量进入网络。
        网络地址转换（NAT）：使用NAT隐藏内部网络，并限制对内部网络的访问。
        安全性协议：使用安全性协议（如TLS，SSL）来加密通信。
        访问控制：使用访问控制（如身份验证和授权）来确保只有授权的用户才能访问网络中的数据。


    IPv6网络架构通常包括以下组件：
        IPv6主机：可以运行IPv6协议并通过IPv6网络通信的设备。
        IPv6路由器：负责将数据包从一个IPv6网络转发到另一个IPv6网络。
        IPv6网关：连接IPv6网络和其他网络（如IPv4网络），并实现数据包的转换。
        IPv6 DNS服务器：通过IPv6协议将域名映射到IPv6地址。
        IPv6网络安全策略：确保IPv6网络的安全性，可以包括防火墙，安全组，IPS等。
    在 IPv6 网络中进行路由主要有两种方法：
        静态路由：在静态路由方案中，网络管理员手动配置每个路由器上的路由表，并在网络发生变化时手动更新路由表。
        动态路由：动态路由方案使用路由协议（如 OSPF、BGP 等），动态地学习其它路由器发布的路由信息，并在网络发生变化时自动更新路由表。


防火墙::

    判断恶意请求的方法有多种，主要包括以下几种：
        1. 基于规则的方法：防火墙根据预先设定的规则来识别和阻止恶意流量。
        2. 基于报文内容的方法：防火墙会对请求内容进行分析，以判断请求是否有恶意特征。
        3. 基于行为的方法：防火墙会分析请求的行为特征，如请求的频率和数量，以判断请求是否为恶意请求。
    类似 iptables 的开源、免费防火墙：
        nftables：是 iptables 的后继者，功能更强大，支持多协议，已经成为 Linux 内核的防火墙技术。
        pfSense：是一个开源的防火墙解决方案，可以在商业环境和家庭环境中使用。
        firewalld：是一个高级的防火墙管理工具，可以在运行时动态更改防火墙规则。
        UFW：是 Ubuntu 系统的防火墙管理工具，功能简单易用。
    基于报文内容的方法来判断是否恶意请求：
        两个开源入侵检测和防御系统：
        1. Snort是一个开源的入侵检测系统：https://www.snort.org/
        2. Suricata 使用多种开源项目，例如 Libpcap、Libyaml、Jansson 和 Hounddog。此外，Suricata 还包含多种预定义规则和报告系统，以帮助检测和防范恶意活动。
        there are open-source firewalls that use packet content to determine if a request is malicious. 
            For example, `Snort` is an open-source intrusion detection and prevention system that can be used as a firewall. 
            It can inspect packets and detect malicious content based on a set of rules and signatures. Other examples include Suricata and Bro.
        评估请求是否具有恶意特征的常见方法是使用报文内容分析。
            这可以通过分析请求中的数据、头部字段、URL和文件类型等信息来完成。
            此外，一些安全系统还可以使用模式匹配、机器学习等技术来识别恶意请求。
            除了报文内容分析外，还有其他一些识别恶意请求的方法，例如识别请求来源IP地址是否存在于黑名单中。
    基于行为的方法判断是否恶意请求的开源防火墙
        1. Snort: Snort是一款开源的入侵检测系统(IDS)和防火墙。它可以实时分析网络流量并使用签名数据库识别潜在的威胁。它还可以检测非法流量，如攻击、异常和异常流量。
        2. Suricata: Suricata是一款开源的网络安全解决方案，包括入侵检测系统（IDS）、防火墙和日志记录。它支持多种协议，包括TCP、UDP、HTTP等，并且可以使用多种签名数据库来识别潜在的攻击。
        3. OSSEC (Open Source Security) 是一个开源的全功能安全信息和事件管理（SIEM）系统。它结合了安全信息收集，分析，响应和报告技术，以提高网络安全。
            OSSEC 可以检测潜在的安全威胁，识别攻击行为，并在发现安全事件时进行响应。
            它还提供了一组用于配置安全规则的工具，以便在收到报告时自动采取相应的行动。
            OSSEC 可以用于许多环境，从小型办公室到大型数据中心，都可以适用。
        基于行为的方法判断请求是否有恶意特征是通过对请求的一些行为特征进行分析和评估来识别恶意请求的。
            这些行为特征可以包括请求的频率、持续时间、来源地址、请求内容和目标地址等。
            通过对请求行为特征的分析，防火墙可以识别出可疑的恶意请求，并对其进行相应的防护措施。
            在评估请求行为特征时，可以使用机器学习算法和威胁情报数据库，以识别出潜在的恶意请求。
    基于行为的方法和基于报文内容的方法判断请求是否有恶意特征最大的不同点在于它们所依据的信息来源。
        基于行为的方法依据的是请求的行为特征，如请求频率、请求目标、请求方法、请求内容等信息。
        而基于报文内容的方法依据的是请求的报文内容，如请求的头部、数据包体等。
        因此，基于行为的方法更加侧重于判断请求的运行状态，而基于报文内容的方法更加侧重于判断请求的内容。
        两种方法可以结合使用，从而获得更好的效果。


DDoS::

    防止DDoS技术和手段包括但不限于：
        1. 分布式防御技术：通过多台防火墙或入口节点，将流量分配到多台服务器，减少单个服务器的负载。
        2. 流量清洗：通过识别并过滤攻击请求，只保留有意义的请求，保护服务器和网络。
        3. 负载平衡技术：通过自动调整流量分配，以保证单个服务器的负载不过大。
        4. 异常请求检测技术：通过分析流量特征，识别攻击请求，以保证网络安全。
    流量清洗是一种防御 DDoS 攻击的方法，主要目的是识别并过滤攻击请求，使有效请求能够通过。
        它通过分析网络流量特征、使用过滤器和策略来实现识别和过滤的目的。
        某些流量清洗系统可以通过分析请求来源的 IP 地址、请求内容和请求频率等信息来识别攻击请求，并将它们过滤掉。
            其他流量清洗系统则可以通过分析请求的特定特征，例如报头、数据包大小和发送频率等，来识别攻击请求。
        在过滤请求时，流量清洗系统可以使用各种技术，例如 TCP 重组、IP 过滤和算法，来防止攻击请求到达目标网络。
            流量清洗系统可以通过请求的源 IP 地址、目的地址和端口等参数进行过滤，从而使有效请求能够通过。





局域网内的服务发现会有什么方法
==============================

在局域网内如何实现服务发现::

    在局域网内的服务发现可以通过以下几种方法实现：
    基于 multicast 的服务发现：通过组播协议发现局域网内的服务。
    基于 UDP 的广播：在局域网内广播请求以发现可用的服务。
    基于 DNS 的服务发现：通过对局域网内的特定 DNS 域

    除了多播协议，还可以使用其他协议如SSDP（Simple Service Discovery Protocol）等实现服务发现


    组播（Multicast）：通过组播发送广播信息，以实现服务发现。
    广播（Broadcast）：通过广播发送广播信息，以实现服务发现。
    基于DNS的服务发现：通过DNS协议实现服务发现。
    基于UPnP的服务发现：通过UPnP协议实现服务发现。
        UPnP协议提供了一种更加通用的服务发现和控制机制，允许设备在局域网内自动发现和交互。
    基于mDNS的服务发现：通过mDNS协议实现服务发现。


通过组播实现服务发现的大致流程如下：

    服务提供者：在服务提供者端发送组播信息，该信息包含服务的相关信息，例如服务的名称、地址和端口等。
    服务消费者：在服务消费者端监听组播信息，当接收到服务的相关信息时，可以连接到服务提供者并使用该服务。
    组播协议：在局域网内传播组播信息，以实现服务的发现。

通过广播实现服务发现的大致流程如下：

    服务提供者：在服务提供者端发送广播信息，该信息包含服务的相关信息，例如服务的名称、地址和端口等。
    服务消费者：在服务消费者端监听广播信息，当接收到服务的相关信息时，可以连接到服务提供者并使用该服务。
    广播协议：在局域网内广泛传播广播信息，以实现服务的发现。


UPnP（Universal Plug and Play）是一种通用的设备发现和控制协议，可以用于在局域网内实现服务发现。大致流程如下：

    服务提供者：服务提供者需要实现UPnP协议，并向UPnP网关发送SSDP（Simple Service Discovery Protocol）广播，通知其可用的服务。
    服务消费者：服务消费者需要监听UPnP网关发送的SSDP广播，以查询和发现可用的服务。
    UPnP网关：UPnP网关负责接收服务提供者发送的SSDP广

    服务提供者：向本地网络中的UPnP设备发送信息，注册服务，并在服务注册成功后，向本地网络广播该服务的信息。
    服务消费者：监听UPnP协议发送的广播信息，获取服务的相关信息。
    UPnP设备：维护服务注册信息，并负责将服务的信息广播到本地网络中。

mDNS协议
--------

mDNS协议是一种在局域网内进行服务发现的协议。下面是通过mDNS协议实现服务发现的大致流程：

    服务提供者：将自身提供的服务信息通过mDNS协议发布到本地网络中。
    服务消费者：通过mDNS协议查询本地网络中的服务信息，获取到服务的相关信息。
    mDNS协议：维护本地网络中的服务信息，并且协调服务消费者和服务提供者之间的通信。

mDNS协议是基于UDP协议的，因此查询和响应报文都是通过UDP协议进行传输的。此外，为了避免冲突，mDNS使用了随机的查询ID和源端口号，以及TTL（Time to Live）机制来限制查询的传输范围，以确保服务发现过程的正确性和可靠性。


命令工具
--------

要确定某个主机在哪个组播中，您可以使用以下方法：

    使用命令行工具：您可以使用命令行工具（如 netstat 或 ip mroute）查询系统上的组播连接。这些命令可以显示正在使用的组播地址，以及哪些主机是组播成员。
    使用网络监视器：您可以使用网络监视器（如 Wireshark）捕获网络流量并分析它们。您可以搜索组播地址，以查看哪些主机正在使用该地址进行通信。
    使用网络管理工具：您可以使用网络管理工具（如 SNMP）查询网络上的主机和设备。这些工具可以提供有关组播地址的详细信息，以及哪些主机是组播成员。





netstat -g

    查看结果：该命令的输出将显示当前主机参与的所有组播组。您可以看到每个组的组播地址和接口。如果您要查询特定组播地址的详细信息，请使用以下命令：

netstat -gn

    解释结果：netstat 命令的输出将包括当前主机正在使用的组播地址。如果主机属于某个组播，则该组播地址将在输出中显示。


组播&广播
=========


组播实际使用场景

    路由协议：使用组播地址来广播路由信息，例如RIP和OSPF协议。
    网络扫描：使用组播地址来实现网络扫描，例如nmap工具。
    媒体流：使用组播地址来广播多媒体流，例如视频直播和音频广播。
    公共资源搜索：使用组播地址来实现公共资源搜索，例如UPnP协议。
    共享文件：使用组播地址来实现文件共享，例如NFS协议。
    无线网络管理：使用组播地址来实现无线网络管理，例如WiFi热点管理。


什么场景应该用组播，什么场景应该用广播？
    组播：组播是一种通信方式，其中一组特定的主机或者节点接收并处理来自源主机的数据包，其他不在该组中的主机不会接收该数据包。适用场景如下：
        在网络中传输大量数据：例如多媒体流的传输。
        在网络中的协议广播：例如路由协议的广播。
        在网络中的某个特定组中广播数据：例如在某个特定的工作组中广播数据。

    广播：广播是一种通信方式，其中源主机向全网发送数据包，所有主机都将接收并处理该数据包。适用场景如下：
        在网络中查找资源：例如在网络中查找热点。
        在网络中的协议广播：例如DNS协议的广播。
        在网络中的信息广播：例如紧急广播信息。
        可以看到，广播的使用适用范围比较广泛，但是广播的使用可能造成网络的负担，因此在使用广播时需要谨慎。而组播的使用适用范围比较狭窄，但是组播的使用不会造成网络的负担，因此在使用组


如何把指定interface加入多播::

    sudo ip maddr add <multicast_address> dev <interface_name>
    示例:
        sudo ip maddr add 224.0.0.1 dev eth0

    iface, err := net.InterfaceByName("eth0")
    conn, err := net.ListenMulticastUDP("udp", iface, addr)

    conn, err := net.ListenMulticastUDP("udp", nil, addr)
    iface, err := net.InterfaceByName("en0")
    err = conn.JoinGroup(iface, addr)
    defer conn.LeaveGroup(iface, addr)




net.ListenUDP 和 net.ListenMulticastUDP 有一些不同的功能。

net.ListenUDP 用于监听单播UDP消息，它创建了一个新的UDP套接字并绑定到指定的地址。这个套接字只能接收从指定的地址发送的数据包。
而 net.ListenMulticastUDP 则是用于监听多播UDP消息的。它创建了一个新的UDP套接字，并绑定到指定的地址，然后订阅了指定的多播地址。这个套接字可以接收来自多播地址发送的所有数据包。
因此，如果要监听多播消息，那么应该使用 net.ListenMulticastUDP。如果要监听单播消息，则应该使用 net.ListenUDP。


IPv4多播转发
------------

一般来说，Linux 系统默认是支持 IPv4 多播转发的。你可以使用以下命令检查系统是否支持 IPv4 多播转发
cat /proc/sys/net/ipv4/conf/all/forwarding
可以使用以下命令来开启 IPv4 多播转发：
echo 1 | sudo tee /proc/sys/net/ipv4/conf/all/forwarding

macOS在最新版本中默认禁止了IPv4多播转发，需要在网络代理设备上进行配置。（具体没尝试）


多播功能
--------

如何判断linux设备是否开启多播功能？
```
cat /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
如果输出为 0，表示设备开启了多播功能；如果输出为 1，表示设备没有开启多播功能。
```
在linux系统上，如何开启多播功能？
```
sudo sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=0
```


如何判断网络设备支不支持多播功能？
```
ip link show <interface_name> | grep MULTICAST
如果命令的输出中包含 MULTICAST，则表示网络设备支持多播功能。
```


可以使用 ping 命令来验证多播地址是否通畅
ping -I eth0 -c 3 224.0.0.251
ping -c 3 224.0.0.251



任播
----

- Anycast是一种网络寻址和路由方法，它允许在一个具有相同IP地址的一组主机中选择最佳的目标主机，以便向其发送数据。在Anycast中，每个主机都被配置为使用相同的IP地址，并且路由器负责将传入的数据路由到最近或最优的目标主机。
- Anycast通常用于分布式应用程序、内容分发网络（CDN）和DNS服务器等应用场景。在这些应用中，多个副本被分布在不同的地理位置，这些副本都使用相同的IP地址，并通过路由器来路由数据。当客户端发送数据时，路由器会将数据路由到最近的可用副本，以减少延迟和网络拥塞。

























































