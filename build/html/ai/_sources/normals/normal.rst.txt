常用
####

深度学习适合做::

    接近人类水平的图像分类
    接近人类水平的语音识别
    接近人类水平的手写文字转录
    更好的机器翻译
    更好的文本到语音转换
    数字助理，比如谷歌即时(Google Now)和亚马逊 Alexa
    接近人类水平的自动驾驶
    更好的广告定向投放，Google、百度、必应都在使用
    更好的网络搜索结果
    能够回答用自然语言提出的问题
    在围棋上战胜人类


two essential characteristics of how deep learning learns from data::

    1. the incremental, layer-by-layer way in which 
        increasingly complex representations are developed, 
    2. the fact that these intermediate incremental representations are learned jointly, 
        each layer being updated to follow both the representational needs of the layer above 
        and the needs of the layer below. 
    深度学习从数据中进行学习时有两个基本特征:
    第一，通过渐进的、逐层的方式形成越来 越复杂的表示;
    第二，对中间这些渐进的表示共同进行学习，每一层的变化都需要同时考虑上 下两层的需要

::
    
    1. shadllow learning problems:
        gradient boosting machines  -> XGBoost
    2. perceptual problems:
        deep learning               ->  Keras


::

    strong AI: 通用人工智能
    Weak AI: 专业人工智能


层(Layers)::

    不同的张量格式与不同的数据处理类型需要用到不同的层。
    Different layers are appropriate for different tensor formats and different types of data processing.

    1. 简单的向量数据保存在 形状为 (samples, features) 的 2D 张量中，通常用密集连接层来处理。
        [也叫全连接层()或密集层()，对应于 Keras 的 Dense 类]
    1. simple vector data, stored in 2D tensors of shape (samples, features), 
        is often processed by densely connected layers, 
        also called fully connected or dense layers (the Dense class in Keras).
    说明:
    densely connected layer: 密集连接层
    fully connected layer: 全连接层
    dense layer: 密集层

    2. 序列数据保存在形状为 (samples, timesteps, features) 的 3D 张量中，通常用循环层(比如 Keras 的 LSTM 层)来处理。
    2. Sequence data, stored in 3D tensors of shape (samples, timesteps, features), 
        is typically processed by recurrent layers such as an LSTM layer. 
    说明:
    recurrent layer: 循环层

    3. 图像数据保存在 4D 张量中，通常用二维卷积层(Keras 的 Conv2D)来处理。
    3. Image data, stored in 4D tensors, is usually processed by 2D convolution layers (Conv2D).
    说明:
    2D convolution layers (Conv2D): 二维卷积层(Keras 的 Conv2D)

损失函数(loss function)::

    对于二分类问题，你可以使用二元交叉熵(binary crossentropy)损失函数;
    binary crossentropy for a two-class classification problem

    对于多分类问题，可以用分类交叉熵(categorical crossentropy)损失函数;
    categorical crossentropy for a many-class classification problem

    对于回归问题，可以用均方误差(mean-squared error)损失函数;
    mean-squared error for a regression problem

    对于序列学习问题，可以用联结主义 时序分类(CTC，connectionist temporal classification)损失函数
    connectionist temporal classification (CTC) for a sequence-learning problem

多分类(multiclass classification)::

    单标签、多分类(single-label, multiclass classification)
        每个数据点只能划分到一个类别
    多标签、多分类(multilabel, multiclass classification)


数据预处理::

    vectorization, normalization, handling missing values, and feature extraction.
    向量化、标准化、处理缺失值和特征提取。

    标准化方法:
        1. Take small values—Typically, most values should be in the 0–1 range.
        2. Be homogenous—That is, all features should take values in roughly the same range.
        3. Normalize each feature independently to have a mean of 0.
        4. Normalize each feature independently to have a standard deviation of 1.

    特征引擎(feature engineering):
    The essence of feature engineering: making a problem easier by expressing it in a simpler way. 
    特征工程的本质: 用更简单的方式表述问题，从而使问题变得更容易。



Choosing the right last-layer activation and loss function for your model::

    Binary classification:
        Last-layer activation: sigmoid 
        Loss function: binary_crossentropy
    Multiclass, single-label classification:
        Last-layer activation: softmax 
        Loss function: categorical_crossentropy
    Multiclass, multilabel classification:
        Last-layer activation: sigmoid 
        Loss function: binary_crossentropy
    Regression to arbitrary values:
        Last-layer activation: None 
        Loss function: mse
    Regression to values between 0 and 1:
        Last-layer activation: sigmoid
        Loss function: mse or binary_crossentropy

分类
====

根据应用领域分类::

    计算机视觉领域：包括图像识别、物体跟踪、人脸识别等技术。
    自然语言处理领域：包括机器翻译、智能问答、文本生成等技术。
    语音识别领域：包括语音合成、语音识别、声纹识别等技术。
    游戏 AI 领域：包括游戏策略、游戏角色控制、游戏人工智能交互等技术。
    医疗 AI 领域：包括医学图像识别、病历数据挖掘、疾病辅助诊断等技术。

根据智能层次分类::

    弱人工智能：能够处理特定领域的问题，如语音识别、图像识别等。
    强人工智能：具备全面的认知能力，可以处理各种领域的问题，如自然语言理解、推理、自主学习等。

根据技术特点分类::

    机器学习领域：包括深度学习、强化学习、支持向量机等算法。
    知识图谱领域：包括知识表示、知识图谱构建、知识推理等技术。
    自然语言处理领域：包括文本分析、自然语言理解、机器翻译等技术。
    计算机视觉领域：包括图像识别、物体跟踪、图像生成等技术。
    人机交互领域：包括语音识别、手势识别、智能客服等技术。

AI 发展的三个阶段::

    传统 AI：基于规则、模板和手工特征工程的算法，通常只能处理特定的问题，难以处理复杂的多领域问题
        这类 AI 在算法和模型结构上相对简单，通常不使用深度学习技术。
    现代 AI：基于深度学习、强化学习等现代机器学习技术的 AI，能够处理多领域的问题，并取得了一定的成果。
        现代 AI 在算法和模型结构上相对复杂，需要大量的数据进行训练和优化。
    大模型 AI：大模型 AI 是现代 AI 的一种特定形式，采用具有大量参数和计算能力的特殊模型，如 GPT 系列和 BERT 系列等。





















