名言
####

::

    任何人都能写出计算机能够理解的代码，只有好程序员才能写出人能够理解的代码。
    —— Martin Fowler



    计算机科学中只有两大难题：缓存失效和命名。
    —— Phil Karlton

    5 个为什么（5 Whys）
    丰田集团的创始人丰田佐吉

    微软的保罗·马瑞兹（Paul Maritz）写了一封“Eating our dog food”的邮件，提到要“提高自家产品在内部使用的比例。”

    华为总裁任正非就曾经说过，“让听得见炮声的人来做决策。”

     Eric Raymond，他的《大教堂与集市》推开了开源大门

     Kent Beck，他写了《极限编程解析》、《测试驱动开发》、《实现模式》几本书；

     Martin Fowler，几乎是对外输出的典范，他重新整理了很多似是而非的概念，让人们的讨论有了更标准的词汇，比如，重构、依赖注入（Dependency Injection）

     《计算机程序设计艺术》的作者高德纳，他系统地整理了算法的概念，为了好好写作，他甚至创造了一个排版软件 TeX

     Perl 语言的发明人 Larry Wall 一个经典叙述：优秀程序员应该有三大美德：懒惰、急躁和傲慢（Laziness, Impatience and hubris）
    1. 懒惰，是一种品质，它会使你花很大力气去规避过度的精力消耗，敦促你写出节省体力的程序，别人也能很好地利用，你还会为此写出完善的文档，以免别人来问问题
    2. 急躁，是计算机偷懒时，你会感到的一种愤怒。它会促使你写出超越预期的程序，而不只是响应需求
    3. 傲慢，极度自信，写出（或维护）别人挑不出毛病的程序

    厄尔•南丁格尔说过，「你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然尽失。职业发展的驱动力一定是来自个体本身。记住：工作是属于公司的，而职业生涯却是属于你自己的。」

    Linus Torvalds 曾经说过：“Talk is cheap. Show me the code. ”

    

    1995 年，Robert Martin 就提出了这些设计原则的雏形，然后在他的《敏捷软件开发：原则、实践与模式》这本书中，比较完整地阐述了这五个原则。后来，他有把这些原则进一步整理，成了今天的 “SOLID”。

    2017 年，Robert Martin 出版了《架构整洁之道》（Clean Architecture），他把单一职责原则的定义修改成“一个模块应该仅对一类 actor 负责”，这里的 actor 可以理解为对系统有共同需求的人。

    2014 年 James Lewis 和 Martin Fowler 写的一篇文章，他们在其中给了微服务一个更清晰的定义，把它当作了一种新型的架构风格。

    Martin Fowler 在写《企业应用架构模式》时，提出了一个分布式对象第一定律：不要分布对象

    2003 年 Eric Evans 写了《领域驱动设计》，向行业介绍了 DDD 这套方法论，立即在行业中引起广泛的关注。

    2013 年，在 Eric Evans 出版《领域驱动设计》十年之后，DDD 已经不再是当年吴下阿蒙，有了自己一套比较完整的体系。Vaughn Vernon 将十年的精华重新整理，写了一本《实现领域驱动设计》，普通技术人员终于有机会看明白 DDD 到底好在哪里了。

    2008 年，Robert Martin 的《Clean Code》出版









