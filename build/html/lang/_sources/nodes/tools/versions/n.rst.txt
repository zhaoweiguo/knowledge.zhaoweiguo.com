n命令
#####

* 用于管理 Node.js 版本的工具，和 nvm 类似，但它更简单、更轻量，适合需要快速切换 Node.js 版本的用户。


安装 n ::

	npm install -g n


使用
====

安装Node::

	export N_PREFIX="$HOME/.n"		# 指定安装目录

	# 安装最新的稳定版，支持周期：短期（通常 6 个月）
	n stable

	# 安装最新的 LTS 版本，支持周期：长期（通常 3 年）
	n lts

	安装指定版本（如 Node.js 18.17.1）
	n 18.17.1

	# 升级 Node.js 到最新版本
	n latest



切换 Node.js 版本::

	# 打开交互式菜单
	n

	# 列出已安装的 Node.js 版本
	n ls 			// Output downloaded version
	n ls-remote		// Output matching versions available for download


删除已安装的 Node.js 版本::

	n rm <version>

	示例:
	n rm 16.14.2



	n uninstall                    Remove the installed Node.js


优缺点
======

* 优点
	✅ 安装简单：使用 npm install -g n 直接安装，无需复杂的 shell 配置。
	✅ 切换快速：直接修改系统 node 软链接，不需要每次切换都启用新进程。
	✅ 交互式选择：运行 n 可通过界面选择版本。
	✅ 适用于全局 Node.js 版本管理，不针对单个项目。

* 缺点
	❌ 不适用于 Windows（Windows 用户推荐 nvm-windows）。
	❌ 所有项目共享同一个 Node.js 版本，不适合同时维护多个项目的不同 Node.js 版本（推荐使用 nvm）。整个系统（所有终端窗口、所有项目）都使用指定版本，不会为某个特定项目单独保留不同的版本。
	❌ 需要管理员权限 来修改全局 Node.js 版本。

































