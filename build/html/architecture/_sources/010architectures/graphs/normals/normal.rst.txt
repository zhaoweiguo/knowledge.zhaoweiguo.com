常用
####


定义::

     为了抽象地表示软件系统的整体轮廓和各个组件之间的相互关系和约束边界
     以及软件系统的物理部署和软件系统的演进方向的整体视图

架构图的作用::

      解决沟通障碍
      达成共识
      减少歧义

架构图分类::

    1. Scene View: 场景视图
    * 通常由『用例图』表示
    * 用于描述系统的参与者与功能用例间的关系
    * 反映系统的最终需求和交互设计
    
    2. Logic View: 逻辑视图
    * 用于描述系统软件功能拆解后的组件关系
    * 组件约束和边界，反映系统整体组成与系统如何构建的过程
    * 通常由UML的『组件图』和『类图』来表示
    
    3. Physical View: 物理视图
    * 用于描述系统软件到物理硬件的映射关系
    * 反映出系统的组件是如何部署到一组可计算机器节点上
    * 用于指导软件系统的部署实施过程
    
    4. Workflow/Process Flow: 处理流程图
    * 用于描述系统软件组件之间的通信时序
    * 数据的输入输出，反映系统的功能流程与数据流程
    * 通常由『时序图』和『流程图』表示
    
    5. Network Structure: 网络拓卜图
    
    6. Development Diagram: 开发图
    * 用于描述系统的模块划分和组成，以及细化到内部包的组成设计
    * 服务于开发人员，反映系统开发实施过程

好的架构图::

     画架构图之前
    * 首先应该要明确其受众
    * 再想清楚要给他们传递什么信息
     方法
    * 应该根据受众的不同
    * 传递的信息的不同
    * 用图准确地表达出来
     好不好的直接标准
    * 受众有没有准确接收到想传递的信息

