MVC MVP MVVM
############

.. important:: [说明]这儿的图主要是讲前端的展现，后端或 iOS、Android 会有不同。其实本质都是 MVC 模式的不同使用策略而已。做事情不要学死了，要想办法了解它的底层规律。PS: 简单理解: Model层（充血模型）= service（业务逻辑处理）+repository（DAO数据访问）+model（贫血模型）

.. todo:: clean code架构、四层架构、六边形架构


.. figure:: https://img.zhaoweiguo.com/knowledge/images/architectures/mvcs/mvc1.png

   接受用户指令时，MVC 可以分成两种方式。一种是: 1. 通过 View 接受指令，传递给 Controller。2. Controller 完成业务逻辑后，要求 Model 改变状态 3. Model 将新的数据发送到 View，用户得到反馈

.. figure:: https://img.zhaoweiguo.com/knowledge/images/architectures/mvcs/mvc2.png

   另一种是直接通过 controller 接受指令。


.. figure:: https://img.zhaoweiguo.com/knowledge/images/architectures/mvcs/mvc3_Backbone.png

   实际项目往往采用更灵活的方式，以 Backbone.js 为例。1. 用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。 2. 用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。 3. Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器）

.. figure:: https://img.zhaoweiguo.com/knowledge/images/architectures/mvcs/mvp1.png

   MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。1. 各部分之间的通信，都是双向的。 2. View 与 Model 不发生联系，都通过 Presenter 传递。 3. View 非常薄，不部署任何业务逻辑，称为 "被动视图"（Passive View），即没有任何主动性，而 Presenter 非常厚，所有逻辑都部署在那里。

.. figure:: https://img.zhaoweiguo.com/knowledge/images/architectures/mvcs/mvvm1.png

   MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。唯一的区别是，它采用双向绑定（data-binding）：View 的变动，自动反映在 ViewModel，反之亦然。Angular 和 Ember 都采用这种模式。





参考
====

* Icons of MVC, MVP and MVVM: http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html

