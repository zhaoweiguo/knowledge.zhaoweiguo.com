'
NOTICE
Role: You are a professional engineer; the main goal is to write google-style, elegant, modular, easy to read and maintain code
Language: Please use the same language as the user requirement, but the title and code should be still in English. For example, if the user speaks Chinese, the specific text of your answer should also be in Chinese.
ATTENTION: Use \'##\' to SPLIT SECTIONS, not \'#\'. Output format carefully referenced "Format example".

# Context
## Design
{"Implementation approach":"We will use the Pygame library to create the game and handle user input. The game logic will be implemented using Python classes and functions.","File list":["main.py","game.py"],"Data structures and interfaces":"\
classDiagram\
    class Game {\
        -snake: list\
        -food: tuple\
        -score: int\
        +__init__()\
        +update()\
        +draw()\
        +handle_input()\
        +restart()\
    }\
    class Snake {\
        -body: list\
        -direction: str\
        +__init__(start_pos: tuple, length: int, direction: str)\
        +move()\
        +change_direction(new_direction: str)\
        +grow()\
    }\
    Game --> Snake\
","Program call flow":"\
sequenceDiagram\
    participant M as Main\
    participant G as Game\
    M->>G: initialize game\
    G->>G: update game state\
    G->>G: draw game\
    G->>G: handle user input\
    G->>G: restart game\
","Anything UNCLEAR":"Clarification needed on the scoring system and how the game over condition will be handled."}

## Task
{"Required Python packages":["pygame==2.0.1"],"Required Other language third-party packages":["No third-party dependencies required"],"Logic Analysis":[["game.py","Contains Game class and ... functions"],["main.py","Contains main function, from game import Game"]],"Task list":["game.py","main.py"],"Full API spec":"","Shared Knowledge":"`game.py` contains functions shared across the project.","Anything UNCLEAR":"Clarification needed on the scoring system and how the game over condition will be handled."}

## Legacy Code
```Code

```

## Debug logs
```text



```

## Bug Feedback logs
```text

```

# Format example
## Code: game.py
```python
## game.py
...
```

# Instruction: Based on the context, follow "Format example", write code.

## Code: game.py. Write code with triple quoto, based on the following attentions and context.
1. Only One file: do your best to implement THIS ONLY ONE FILE.
2. COMPLETE CODE: Your code will be part of the entire project, so please implement complete, reliable, reusable code snippets.
3. Set default value: If there is any setting, ALWAYS SET A DEFAULT VALUE, ALWAYS USE STRONG TYPE AND EXPLICIT VARIABLE. AVOID circular import.
4. Follow design: YOU MUST FOLLOW "Data structures and interfaces". DONT CHANGE ANY DESIGN. Do not use public member functions that do not exist in your design.
5. CAREFULLY CHECK THAT YOU DONT MISS ANY NECESSARY CLASS/FUNCTION IN THIS FILE.
6. Before using a external variable/module, make sure you import it first.
7. Write out EVERY CODE DETAIL, DON\'T LEAVE TODO.

'










'
# System
Role: You are a professional software engineer, and your main task is to review and revise the code. You need to ensure that the code conforms to the google-style standards, is elegantly designed and modularized, easy to read and maintain.
Language: Please use the same language as the user requirement, but the title and code should be still in English. For example, if the user speaks Chinese, the specific text of your answer should also be in Chinese.
ATTENTION: Use \'##\' to SPLIT SECTIONS, not \'#\'. Output format carefully referenced "Format example".

# Context
## System Design
{"Implementation approach":"We will use the Pygame library to create the game and handle user input. The game logic will be implemented using Python classes and functions.","File list":["main.py","game.py"],"Data structures and interfaces":"\
classDiagram\
    class Game {\
        -snake: list\
        -food: tuple\
        -score: int\
        +__init__()\
        +update()\
        +draw()\
        +handle_input()\
        +restart()\
    }\
    class Snake {\
        -body: list\
        -direction: str\
        +__init__(start_pos: tuple, length: int, direction: str)\
        +move()\
        +change_direction(new_direction: str)\
        +grow()\
    }\
    Game --> Snake\
","Program call flow":"\
sequenceDiagram\
    participant M as Main\
    participant G as Game\
    M->>G: initialize game\
    G->>G: update game state\
    G->>G: draw game\
    G->>G: handle user input\
    G->>G: restart game\
","Anything UNCLEAR":"Clarification needed on the scoring system and how the game over condition will be handled."}

## Task
{"Required Python packages":["pygame==2.0.1"],"Required Other language third-party packages":["No third-party dependencies required"],"Logic Analysis":[["game.py","Contains Game class and ... functions"],["main.py","Contains main function, from game import Game"]],"Task list":["game.py","main.py"],"Full API spec":"","Shared Knowledge":"`game.py` contains functions shared across the project.","Anything UNCLEAR":"Clarification needed on the scoring system and how the game over condition will be handled."}

## Code Files



-----

## Code to be Reviewed: game.py
```Code
## game.py

import pygame
import random

class Snake:
    def __init__(self, start_pos: tuple, length: int, direction: str):
        self.body = [start_pos]
        self.direction = direction
        self.length = length

    def move(self):
        head = self.body[0]
        x, y = head
        if self.direction == \'UP\':
            new_head = (x, y - 10)
        elif self.direction == \'DOWN\':
            new_head = (x, y + 10)
        elif self.direction == \'LEFT\':
            new_head = (x - 10, y)
        elif self.direction == \'RIGHT\':
            new_head = (x + 10, y)
        self.body = [new_head] + self.body[:-1]

    def change_direction(self, new_direction: str):
        if new_direction in [\'UP\', \'DOWN\', \'LEFT\', \'RIGHT\']:
            self.direction = new_direction

    def grow(self):
        self.length += 1
        self.body.append((0, 0))  # Set default value

class Game:
    def __init__(self):
        self.snake = Snake((100, 50), 1, \'RIGHT\')  # Set default value
        self.food = (200, 200)  # Set default value
        self.score = 0  # Set default value

    def update(self):
        self.snake.move()
        if self.snake.body[0] == self.food:
            self.snake.grow()
            self.food = (random.randrange(0, 400, 10), random.randrange(0, 400, 10))  # Set default value

    def draw(self):
        pass  # Set default value

    def handle_input(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    self.snake.change_direction(\'UP\')
                elif event.key == pygame.K_DOWN:
                    self.snake.change_direction(\'DOWN\')
                elif event.key == pygame.K_LEFT:
                    self.snake.change_direction(\'LEFT\')
                elif event.key == pygame.K_RIGHT:
                    self.snake.change_direction(\'RIGHT\')

    def restart(self):
        self.snake = Snake((100, 50), 1, \'RIGHT\')  # Set default value
        self.food = (200, 200)  # Set default value
        self.score = 0  # Set default value

```

## Code Review: game.py
1. The code is mostly implemented as per the requirements. However, the `draw` method in the `Game` class is not implemented, which needs to be completed to render the game on the screen.
   
2. The logic in the `Snake` class for movement (`move` method) appears correct as it updates the snake\'s position based on the current direction. The `update` method in the `Game` class correctly handles snake movement and growth upon eating food.

3. The existing code structure follows the outlined "Data structures and interfaces" where `Game` interacts with `Snake` through defined methods (`move`, `grow`, `change_direction`) and attributes (`body`, `direction`) encapsulated within `Snake`.

4. All functions described in the code are implemented. No additional functions are required based on the provided requirements.

5. All necessary pre-dependencies (`pygame`) have been imported at the top of `game.py` as required.

6. There are no methods from other files being reused in `game.py`. The shared knowledge mentions functions in `game.py` being shared across the project, which should be leveraged correctly within the file.

## Actions:
1. Implement the `draw` method in the `Game` class to handle rendering of the game elements on the screen using `pygame` functionalities.

```python
def draw(self):
    screen.fill((0, 0, 0))  # Example: Clear screen with black
    pygame.draw.rect(screen, (255, 0, 0), (*self.food, 10, 10))  # Example: Draw food as red rectangle
    for segment in self.snake.body:
        pygame.draw.rect(screen, (0, 255, 0), (*segment, 10, 10))  # Example: Draw snake segments as green rectangles
    pygame.display.flip()  # Example: Update the display
```

## Code Review Result:
LBTM

# Instruction: rewrite the `game.py` based on the Code Review and Actions
## Rewrite Code: CodeBlock. If it still has some bugs, rewrite game.py with triple quotes. Do your utmost to optimize THIS SINGLE FILE. Return all completed codes and prohibit the return of unfinished codes.
```Code
## game.py
...
```
'





















'
# System
Role: You are a professional software engineer, and your main task is to review and revise the code. You need to ensure that the code conforms to the google-style standards, is elegantly designed and modularized, easy to read and maintain.
Language: Please use the same language as the user requirement, but the title and code should be still in English. For example, if the user speaks Chinese, the specific text of your answer should also be in Chinese.
ATTENTION: Use \'##\' to SPLIT SECTIONS, not \'#\'. Output format carefully referenced "Format example".

# Context
## System Design
{"Implementation approach":"We will use the Pygame library to create the game and handle user input. The game logic will be implemented using Python classes and functions.","File list":["main.py","game.py"],"Data structures and interfaces":"\
classDiagram\
    class Game {\
        -snake: list\
        -food: tuple\
        -score: int\
        +__init__()\
        +update()\
        +draw()\
        +handle_input()\
        +restart()\
    }\
    class Snake {\
        -body: list\
        -direction: str\
        +__init__(start_pos: tuple, length: int, direction: str)\
        +move()\
        +change_direction(new_direction: str)\
        +grow()\
    }\
    Game --> Snake\
","Program call flow":"\
sequenceDiagram\
    participant M as Main\
    participant G as Game\
    M->>G: initialize game\
    G->>G: update game state\
    G->>G: draw game\
    G->>G: handle user input\
    G->>G: restart game\
","Anything UNCLEAR":"Clarification needed on the scoring system and how the game over condition will be handled."}

## Task
{"Required Python packages":["pygame==2.0.1"],"Required Other language third-party packages":["No third-party dependencies required"],"Logic Analysis":[["game.py","Contains Game class and ... functions"],["main.py","Contains main function, from game import Game"]],"Task list":["game.py","main.py"],"Full API spec":"","Shared Knowledge":"`game.py` contains functions shared across the project.","Anything UNCLEAR":"Clarification needed on the scoring system and how the game over condition will be handled."}

## Code Files



-----

## Code to be Reviewed: game.py
```Code
## game.py

import pygame
import random

class Snake:
    def __init__(self, start_pos: tuple, length: int, direction: str):
        self.body = [start_pos]
        self.direction = direction
        self.length = length

    def move(self):
        head = self.body[0]
        x, y = head
        if self.direction == \'UP\':
            new_head = (x, y - 10)
        elif self.direction == \'DOWN\':
            new_head = (x, y + 10)
        elif self.direction == \'LEFT\':
            new_head = (x - 10, y)
        elif self.direction == \'RIGHT\':
            new_head = (x + 10, y)
        self.body = [new_head] + self.body[:-1]

    def change_direction(self, new_direction: str):
        if new_direction in [\'UP\', \'DOWN\', \'LEFT\', \'RIGHT\']:
            self.direction = new_direction

    def grow(self):
        self.length += 1
        self.body.append((0, 0))  # Placeholder for new segment coordinates

class Game:
    def __init__(self):
        self.snake = Snake((100, 50), 1, \'RIGHT\')
        self.food = (200, 200)
        self.score = 0

    def update(self):
        self.snake.move()
        if self.snake.body[0] == self.food:
            self.snake.grow()
            self.food = (random.randrange(0, 400, 10), random.randrange(0, 400, 10))

    def draw(self, screen):
        screen.fill((0, 0, 0))  # Clear screen with black
        pygame.draw.rect(screen, (255, 0, 0), (*self.food, 10, 10))  # Draw food as red rectangle
        for segment in self.snake.body:
            pygame.draw.rect(screen, (0, 255, 0), (*segment, 10, 10))  # Draw snake segments as green rectangles
        pygame.display.flip()  # Update the display

    def handle_input(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    self.snake.change_direction(\'UP\')
                elif event.key == pygame.K_DOWN:
                    self.snake.change_direction(\'DOWN\')
                elif event.key == pygame.K_LEFT:
                    self.snake.change_direction(\'LEFT\')
                elif event.key == pygame.K_RIGHT:
                    self.snake.change_direction(\'RIGHT\')

    def restart(self):
        self.snake = Snake((100, 50), 1, \'RIGHT\')
        self.food = (200, 200)
        self.score = 0

```



-----

# Code Review Format example 1
## Code Review: game.py
1. No, we should fix the logic of class A due to ...
2. ...
3. ...
4. No, function B is not implemented, ...
5. ...
6. ...

## Actions
1. Fix the `handle_events` method to update the game state only if a move is successful.
   ```python
   def handle_events(self):
       for event in pygame.event.get():
           if event.type == pygame.QUIT:
               return False
           if event.type == pygame.KEYDOWN:
               moved = False
               if event.key == pygame.K_UP:
                   moved = self.game.move(\'UP\')
               elif event.key == pygame.K_DOWN:
                   moved = self.game.move(\'DOWN\')
               elif event.key == pygame.K_LEFT:
                   moved = self.game.move(\'LEFT\')
               elif event.key == pygame.K_RIGHT:
                   moved = self.game.move(\'RIGHT\')
               if moved:
                   # Update the game state only if a move was successful
                   self.render()
       return True
   ```
2. Implement function B

## Code Review Result
LBTM

-----

# Code Review Format example 2
## Code Review: game.py
1. Yes.
2. Yes.
3. Yes.
4. Yes.
5. Yes.
6. Yes.

## Actions
pass

## Code Review Result
LGTM

-----



# Instruction: Based on the actual code, follow one of the "Code Review Format example".
- Note the code filename should be `game.py`. Return the only ONE file `game.py` under review.

## Code Review: Ordered List. Based on the "Code to be Reviewed", provide key, clear, concise, and specific answer. If any answer is no, explain how to fix it step by step.
1. Is the code implemented as per the requirements? If not, how to achieve it? Analyse it step by step.
2. Is the code logic completely correct? If there are errors, please indicate how to correct them.
3. Does the existing code follow the "Data structures and interfaces"?
4. Are all functions implemented? If there is no implementation, please indicate how to achieve it step by step.
5. Have all necessary pre-dependencies been imported? If not, indicate which ones need to be imported
6. Are methods from other files being reused correctly?

## Actions: Ordered List. Things that should be done after CR, such as implementing class A and function B

## Code Review Result: str. If the code doesn\'t have bugs, we don\'t need to rewrite it, so answer LGTM and stop. ONLY ANSWER LGTM/LBTM.
LGTM/LBTM

'






















'
NOTICE
Role: You are a professional engineer; the main goal is to write google-style, elegant, modular, easy to read and maintain code
Language: Please use the same language as the user requirement, but the title and code should be still in English. For example, if the user speaks Chinese, the specific text of your answer should also be in Chinese.
ATTENTION: Use \'##\' to SPLIT SECTIONS, not \'#\'. Output format carefully referenced "Format example".

# Context
## Design
{"Implementation approach":"We will use the Pygame library to create the game and handle user input. The game logic will be implemented using Python classes and functions.","File list":["main.py","game.py"],"Data structures and interfaces":"\
classDiagram\
    class Game {\
        -snake: list\
        -food: tuple\
        -score: int\
        +__init__()\
        +update()\
        +draw()\
        +handle_input()\
        +restart()\
    }\
    class Snake {\
        -body: list\
        -direction: str\
        +__init__(start_pos: tuple, length: int, direction: str)\
        +move()\
        +change_direction(new_direction: str)\
        +grow()\
    }\
    Game --> Snake\
","Program call flow":"\
sequenceDiagram\
    participant M as Main\
    participant G as Game\
    M->>G: initialize game\
    G->>G: update game state\
    G->>G: draw game\
    G->>G: handle user input\
    G->>G: restart game\
","Anything UNCLEAR":"Clarification needed on the scoring system and how the game over condition will be handled."}

## Task
{"Required Python packages":["pygame==2.0.1"],"Required Other language third-party packages":["No third-party dependencies required"],"Logic Analysis":[["game.py","Contains Game class and ... functions"],["main.py","Contains main function, from game import Game"]],"Task list":["game.py","main.py"],"Full API spec":"","Shared Knowledge":"`game.py` contains functions shared across the project.","Anything UNCLEAR":"Clarification needed on the scoring system and how the game over condition will be handled."}

## Legacy Code
```Code
----- game.py
```## game.py

import pygame
import random

class Snake:
    def __init__(self, start_pos: tuple, length: int, direction: str):
        self.body = [start_pos]
        self.direction = direction
        self.length = length

    def move(self):
        head = self.body[0]
        x, y = head
        if self.direction == \'UP\':
            new_head = (x, y - 10)
        elif self.direction == \'DOWN\':
            new_head = (x, y + 10)
        elif self.direction == \'LEFT\':
            new_head = (x - 10, y)
        elif self.direction == \'RIGHT\':
            new_head = (x + 10, y)
        self.body = [new_head] + self.body[:-1]

    def change_direction(self, new_direction: str):
        if new_direction in [\'UP\', \'DOWN\', \'LEFT\', \'RIGHT\']:
            self.direction = new_direction

    def grow(self):
        self.length += 1
        last_segment = self.body[-1]
        if self.direction == \'UP\':
            new_segment = (last_segment[0], last_segment[1] + 10)
        elif self.direction == \'DOWN\':
            new_segment = (last_segment[0], last_segment[1] - 10)
        elif self.direction == \'LEFT\':
            new_segment = (last_segment[0] + 10, last_segment[1])
        elif self.direction == \'RIGHT\':
            new_segment = (last_segment[0] - 10, last_segment[1])
        self.body.append(new_segment)

class Game:
    def __init__(self):
        self.snake = Snake((100, 50), 1, \'RIGHT\')
        self.food = (200, 200)
        self.score = 0

    def update(self):
        self.snake.move()
        if self.snake.body[0] == self.food:
            self.snake.grow()
            self.score += 1
            self.food = (random.randrange(0, 400, 10), random.randrange(0, 400, 10))
        
        # Check game over conditions
        if self.check_collision() or self.check_boundaries():
            self.restart()

    def draw(self, screen):
        screen.fill((0, 0, 0))  # Clear screen with black
        pygame.draw.rect(screen, (255, 0, 0), (*self.food, 10, 10))  # Draw food as red rectangle
        for segment in self.snake.body:
            pygame.draw.rect(screen, (0, 255, 0), (*segment, 10, 10))  # Draw snake segments as green rectangles
        pygame.display.flip()  # Update the display

    def handle_input(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    self.snake.change_direction(\'UP\')
                elif event.key == pygame.K_DOWN:
                    self.snake.change_direction(\'DOWN\')
                elif event.key == pygame.K_LEFT:
                    self.snake.change_direction(\'LEFT\')
                elif event.key == pygame.K_RIGHT:
                    self.snake.change_direction(\'RIGHT\')

    def restart(self):
        self.snake = Snake((100, 50), 1, \'RIGHT\')
        self.food = (200, 200)
        self.score = 0

    def check_collision(self):
        # Check if snake collides with itself
        return len(self.snake.body) != len(set(self.snake.body))

    def check_boundaries(self):
        # Check if snake hits the screen boundaries
        head = self.snake.body[0]
        x, y = head
        return x < 0 or x >= 400 or y < 0 or y >= 400
```
```

## Debug logs
```text



```

## Bug Feedback logs
```text

```

# Format example
## Code: main.py
```python
## main.py
...
```

# Instruction: Based on the context, follow "Format example", write code.

## Code: main.py. Write code with triple quoto, based on the following attentions and context.
1. Only One file: do your best to implement THIS ONLY ONE FILE.
2. COMPLETE CODE: Your code will be part of the entire project, so please implement complete, reliable, reusable code snippets.
3. Set default value: If there is any setting, ALWAYS SET A DEFAULT VALUE, ALWAYS USE STRONG TYPE AND EXPLICIT VARIABLE. AVOID circular import.
4. Follow design: YOU MUST FOLLOW "Data structures and interfaces". DONT CHANGE ANY DESIGN. Do not use public member functions that do not exist in your design.
5. CAREFULLY CHECK THAT YOU DONT MISS ANY NECESSARY CLASS/FUNCTION IN THIS FILE.
6. Before using a external variable/module, make sure you import it first.
7. Write out EVERY CODE DETAIL, DON\'T LEAVE TODO.

'











