Makefile规则
############

Makefile文件由一系列规则（rules）构成。每条规则的形式如下::

    <target> : <prerequisites> 
    [tab]  <commands>

    1. <target>: 叫做"目标"
    2. <prerequisites>: 叫做"前置条件"
        代表生成该 target 所需要的依赖项
        当有多个依赖项时，依赖项之间用空格分隔
    3. <commands>: 叫做"命令"
        代表该 target 要执行的命令（可以是任意的 shell 命令）

目标(target)
============

::

    可使用通配符
    当有多个目标时，目标之间用空格分隔

文件名
------

.. note:: 只要 targets 不存在，或 prerequisites 中有一个以上的文件比 targets 文件新，那么 command 所定义的命令就会被执行，从而产生我们需要的文件，或执行我们期望的操作。



伪目标-phony target
-------------------

除了文件名，目标还可以是某个操作的名字，这称为"伪目标"（phony target）::

    clean:
        rm *.o

.. note:: 上面代码的目标是clean，它不是文件名，而是一个操作的名字，属于"伪目标"。如果当前目录中，正好有一个文件叫做clean，那么这个命令不会执行，因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令。

为了避免这种情况，可以明确声明clean是"伪目标"，写法如下::

    .PHONY: clean
    clean:
        rm *.o temp

.. note:: 通过[.PHONY]声明clean是"伪目标"之后，make就不会去检查是否存在一个叫做clean的文件，而是每次运行都执行对应的命令



参考
----

* Special Built-in Target Names(像.PHONY的内置目标名): https://www.gnu.org/software/make/manual/html_node/Special-Targets.html#Special-Targets



前置条件(prerequisites)
=======================

前置条件通常是一组文件名，之间用空格分隔::

    它指定了"目标"是否重新构建的判断标准:
    1. 只要有一个前置文件不存在
    2. 有过更新（前置文件的last-modification时间戳比目标的时间戳新），"目标"就需要重新构建

实例::

    result.txt: source.txt
        cp source.txt result.txt
    source.txt:
        echo "this is the source" > source.txt

连续执行两次make result.txt::

    第一次执行会先新建 source.txt，然后再新建 result.txt
    第二次执行，Make发现 source.txt 没有变动（时间戳晚于 result.txt）
      就不会执行任何操作，result.txt 也不会重新生成


order-only 依赖
---------------

.. note:: 只要 prerequisites 中有任何文件发生改变，就会重新构造 target。但是有时候，我们希望只有当 prerequisites 中的部分文件改变时，才重新构造 target。

order-only prerequisites 的形式如下::

    <targets> : <normal-prerequisites> | <order-only-prerequisites>
    [tab]  <commands>

.. note:: 只有第一次构造 targets 时，才会使用 order-only-prerequisites。后面即使 order-only-prerequisites 发生改变，也不会重新构造 targets。只有 normal-prerequisites 中的文件发生改变时，才会重新构造 targets。这里，符号 “|” 后面的 prerequisites 就是 order-only-prerequisites






命令(commands)
==============

命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成::

    它是构建"目标"的具体指令，它的运行结果通常就是生成目标文件

每行命令之前必须有一个tab键。如果想用其他键，可以用内置变量.RECIPEPREFIX声明::

    .RECIPEPREFIX = >
    all:
    > echo Hello, world
    // 用.RECIPEPREFIX指定，大于号（>）替代tab键
    // 所以，每一行命令的起首变成了大于号，而不是tab键

注意:每行命令在一个单独的shell中执行。这些Shell之间没有继承关系::

    // 有问题
    var-lost:
        export foo=bar
        echo "foo=[$$foo]"

    // 正确1
    var-kept:
        export foo=bar; echo "foo=[$$foo]"

    // 正确2
    var-kept:
        export foo=bar; \
        echo "foo=[$$foo]"

    // 正确3(是加上.ONESHELL:命令)
    .ONESHELL:
    var-kept:
        export foo=bar; 
        echo "foo=[$$foo]"





